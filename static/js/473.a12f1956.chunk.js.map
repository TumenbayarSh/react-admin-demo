{"version":3,"file":"static/js/473.a12f1956.chunk.js","mappings":"uJAIA,qBACI,IAAMA,GAAOC,EAAAA,EAAAA,GAAa,CAAEC,eAAe,IACrCC,EAAa,IAAIC,IAAAA,aAAqB,yBAO5C,OANIC,SACAA,OAAOF,WAAaA,GAExBA,EAAWG,KAAKN,GAChBG,EAAWI,gBACXC,EAAAA,EAAAA,KAAe,8BAA+BL,EAAWM,cAClD,kBAAMD,EAAAA,EAAAA,a,qMCXJ,EAAuB,YAAC,EAAQ,GAAT,OAChC,wBACI,EAAOE,QACH,SAAC,EAAK,EAAOC,GAAb,OACI,EAAIC,OAAO,IAAIC,MAAM,EAAQF,IAAQG,KAAK,MAC9C,OALwB,wBASvB,EAAkB,sBAC3B,kBAAoB,IAAM,IADC,mBAGlB,EAAa,YAAC,EAAgB,GACvC,IAAM,EACF,aAAmBC,KACb,EAAQC,UACRD,KAAKE,MAAQ,QAEjB,GAAQ,aADmBF,KAAO,EAAQC,UAAYD,KAAKE,OAC3C,EAChB,EAAc,kBAAoB,CAAEC,IAAK,IAEzC,EAAKC,KAAKC,KAAK,EAAc,GAAS,EAC5C,OAAO,IAAIL,KAAK,EAAQ,KAVF,cAab,EAAc,YAAC,EAAK,GAAN,OACvBM,WAAW,kBAAoB,CAAEC,IAAA,EAAKJ,IAAA,EAAKK,UAAW,MAAQC,QAAQ,MAD/C,eCvBpB,EAAQ,YAAC,EAAD,GAA2B,IAApB,EAAoB,EAApBtB,cAGd,EAAoB,EAExB,OAAOW,MAAMY,KAAKZ,MAAM,KAAKa,QAAQC,KAAI,SAAAhB,GACrC,IAAM,EAAa,IACb,EAAY,EAAW,GACvB,EACF,EAAgB,KAAO,EAPV,IAQX,EAAa,EAAAiB,KAAA,YACb,EAAY,EAAAA,KAAA,WACZ,EAAQ,EAAAC,SAAA,MAAe,EAAY,GACnC,EAAW,EAAc,EAAAC,KAAA,KAAU,IAAM,KACzC,EAAS,EACT,uCACA,EACA,aACA,EAEN,OAAI,GACA,IAGG,CACHC,GAAApB,EACAqB,WAAA,EACAC,UAAA,EACAC,MAAA,EACAC,QAAS,EAAc,EAAAA,QAAA,gBAA0B,KACjDC,QAAS,EAAc,EAAAD,QAAA,UAAoB,KAC3CE,KAAM,EAAc,EAAAF,QAAA,OAAiB,KACrCG,UAAW,EAAc,EAAAH,QAAA,YAAsB,KAC/CI,OAAA,EACAC,SACI,GAAiB,EAAW,EAASC,cAAgB,EACzDC,WAAY,EAAgB,EAAWD,cAAgB,EACvDE,UAAW,EAAgB,EAAUF,cAAgB,EACrDG,YAAa,EACbC,gBAAiB,KACjBC,gBAAgB,GAAc,EAAgB,IAC9CC,OAAQ,GACRC,YAAa,EACbC,YAAa,QA3CV,WCJR,EAAQ,oBAAM,CACjB,CAAElB,GAAI,EAAGH,KAAM,WACf,CAAEG,GAAI,EAAGH,KAAM,SACf,CAAEG,GAAI,EAAGH,KAAM,YACf,CAAEG,GAAI,EAAGH,KAAM,QACf,CAAEG,GAAI,EAAGH,KAAM,QACf,CAAEG,GAAI,EAAGH,KAAM,WACf,CAAEG,GAAI,EAAGH,KAAM,QACf,CAAEG,GAAI,EAAGH,KAAM,UACf,CAAEG,GAAI,EAAGH,KAAM,UACf,CAAEG,GAAI,EAAGH,KAAM,UACf,CAAEG,GAAI,GAAIH,KAAM,QAChB,CAAEG,GAAI,GAAIH,KAAM,UAChB,CAAEG,GAAI,GAAIH,KAAM,YAbL,WCIT,EAAoB,CACtBsB,QAAS,CACL,WACA,YACA,YACA,eACA,UACA,eACA,cACA,mBACA,gBACA,gBAEJC,MAAO,CACH,eACA,eACA,sBACA,cACA,aACA,gBACA,cACA,cACA,iBACA,eAEJC,SAAU,CACN,iBACA,gBACA,cACA,YACA,aACA,cACA,eACA,aACA,eACA,aACA,gBAEJC,KAAM,CACF,YACA,eACA,sBACA,aACA,YACA,gBACA,cACA,iBACA,gBACA,gBAEJhB,KAAM,CACF,gBACA,aACA,mBACA,eACA,WACA,cACA,kBACA,gBACA,aACA,eAEJiB,QAAS,CACL,eACA,cACA,iBACA,aACA,cACA,cACA,YACA,aACA,mBACA,iBAEJC,KAAM,CACF,cACA,YACA,gBACA,YACA,eACA,yBACA,cACA,cACA,aACA,cAEJC,OAAQ,CACJ,oBACA,WACA,aACA,eACA,kBACA,aACA,YACA,aACA,cACA,iBAEJC,OAAQ,CACJ,iBACA,gBACA,aACA,gBACA,eACA,gBACA,mBACA,cACA,cACA,iBAEJC,OAAQ,CACJ,eACA,aACA,YA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","sources":["fakeServer/rest.ts","../../data-generator/src/utils.ts","../../data-generator/src/customers.ts","../../data-generator/src/categories.ts","../../data-generator/src/products.ts","../../data-generator/src/commands.ts","../../data-generator/src/invoices.ts","../../data-generator/src/reviews.ts","../../data-generator/src/finalize.ts","../../data-generator/src/index.ts"],"sourcesContent":["import FakeRest from 'fakerest';\nimport fetchMock from 'fetch-mock';\nimport generateData from 'data-generator-retail';\n\nexport default () => {\n    const data = generateData({ serializeDate: true });\n    const restServer = new FakeRest.FetchServer('http://localhost:4000');\n    if (window) {\n        window.restServer = restServer; // give way to update data in the console\n    }\n    restServer.init(data);\n    restServer.toggleLogging(); // logging is off by default, enable it\n    fetchMock.mock('begin:http://localhost:4000', restServer.getHandler());\n    return () => fetchMock.restore();\n};\n","import faker from 'faker/locale/en';\n\nexport const weightedArrayElement = (values, weights) =>\n    faker.random.arrayElement(\n        values.reduce(\n            (acc, value, index) =>\n                acc.concat(new Array(weights[index]).fill(value)),\n            []\n        )\n    );\n\nexport const weightedBoolean = likelyhood =>\n    faker.random.number(99) < likelyhood;\n\nexport const randomDate = (minDate?: Date, maxDate?: Date) => {\n    const minTs =\n        minDate instanceof Date\n            ? minDate.getTime()\n            : Date.now() - 5 * 365 * 24 * 60 * 60 * 1000; // 5 years\n    const maxTs = maxDate instanceof Date ? maxDate.getTime() : Date.now();\n    const range = maxTs - minTs;\n    const randomRange = faker.random.number({ max: range });\n    // move it more towards today to account for traffic increase\n    const ts = Math.sqrt(randomRange / range) * range;\n    return new Date(minTs + ts);\n};\n\nexport const randomFloat = (min, max) =>\n    parseFloat(faker.random.number({ min, max, precision: 0.01 }).toFixed(2));\n","import { date, name, internet, address } from 'faker/locale/en';\n\nimport { randomDate, weightedBoolean } from './utils';\n\nexport default (db, { serializeDate }) => {\n    // This is the total number of people pictures available. We only use those pictures for actual customers\n    const maxCustomers = 223;\n    let numberOfCustomers = 0;\n\n    return Array.from(Array(900).keys()).map(id => {\n        const first_seen = randomDate();\n        const last_seen = randomDate(first_seen);\n        const has_ordered =\n            weightedBoolean(25) && numberOfCustomers < maxCustomers;\n        const first_name = name.firstName();\n        const last_name = name.lastName();\n        const email = internet.email(first_name, last_name);\n        const birthday = has_ordered ? date.past(60) : null;\n        const avatar = has_ordered\n            ? 'https://marmelab.com/posters/avatar-' +\n              numberOfCustomers +\n              '.jpeg'\n            : undefined;\n\n        if (has_ordered) {\n            numberOfCustomers++;\n        }\n\n        return {\n            id,\n            first_name,\n            last_name,\n            email,\n            address: has_ordered ? address.streetAddress() : null,\n            zipcode: has_ordered ? address.zipCode() : null,\n            city: has_ordered ? address.city() : null,\n            stateAbbr: has_ordered ? address.stateAbbr() : null,\n            avatar,\n            birthday:\n                serializeDate && birthday ? birthday.toISOString() : birthday,\n            first_seen: serializeDate ? first_seen.toISOString() : first_seen,\n            last_seen: serializeDate ? last_seen.toISOString() : last_seen,\n            has_ordered: has_ordered,\n            latest_purchase: null, // finalize\n            has_newsletter: has_ordered ? weightedBoolean(30) : true,\n            groups: [], // finalize\n            nb_commands: 0,\n            total_spent: 0,\n        };\n    });\n};\n","export default () => [\n    { id: 0, name: 'animals' },\n    { id: 1, name: 'beard' },\n    { id: 2, name: 'business' },\n    { id: 3, name: 'cars' },\n    { id: 4, name: 'city' },\n    { id: 5, name: 'flowers' },\n    { id: 6, name: 'food' },\n    { id: 7, name: 'nature' },\n    { id: 8, name: 'people' },\n    { id: 9, name: 'sports' },\n    { id: 10, name: 'tech' },\n    { id: 11, name: 'travel' },\n    { id: 12, name: 'water' },\n];\n","import { random, lorem } from 'faker/locale/en';\n\nimport { randomFloat, weightedBoolean } from './utils';\n\nconst productReferences = {\n    animals: [\n        'Cat Nose',\n        'Dog Grass',\n        'Brown Cow',\n        'Leopard Road',\n        'Sad Dog',\n        'Pelican Pier',\n        'Green Birds',\n        'Concrete Seaguls',\n        'Hiding Seagul',\n        'Sand Caravan',\n    ],\n    beard: [\n        'Black Auburn',\n        'Basket Beard',\n        'Handlebar Moustache',\n        'White Beard',\n        'Sailor Man',\n        'Natural Beard',\n        'Yeard Phone',\n        'Braid Beard',\n        'Terminal Black',\n        'Short Boxed',\n    ],\n    business: [\n        'Corporate Prop',\n        'Office Chairs',\n        'White Clock',\n        'Work Suit',\n        'Suit & Tie',\n        'Shake Hands',\n        'Building Sky',\n        'Yellow Pad',\n        'Work Devices',\n        'Hands Clap',\n        'Work Meeting',\n    ],\n    cars: [\n        'Old Combi',\n        'Asian Plates',\n        'Pedestrian Crossing',\n        'Farmer Boy',\n        'Make Over',\n        'Sports Sunset',\n        'Desert Jeep',\n        'Highway Bridge',\n        'Race Stickers',\n        'White Deluxe',\n    ],\n    city: [\n        'Bridge Lights',\n        'Color Dots',\n        'Cloud Suspension',\n        'Paved Street',\n        'Blue Bay',\n        'Wooden Door',\n        'Concrete Angles',\n        'London Lights',\n        'Fort Point',\n        'Rainy Glass',\n    ],\n    flowers: [\n        'Apricot Tree',\n        'Orange Rose',\n        'Purple Petunia',\n        'Water Lily',\n        'White Peony',\n        'Poppy Field',\n        'Blue Flax',\n        'Love Roses',\n        'California Poppy',\n        'Dalhia Colors',\n    ],\n    food: [\n        'Fuzzy Forks',\n        'Stamp Mug',\n        'Two Expressos',\n        'Red Latte',\n        'Black Grapes',\n        'Forgotten Strawberries',\n        'Close Steam',\n        'Brewing Tea',\n        'Red Onions',\n        'Dark Honey',\n    ],\n    nature: [\n        'Distant Mountains',\n        'Fog Pond',\n        'Sand Rocks',\n        'Pebble Shore',\n        'Eroded Fractals',\n        'Water Fall',\n        'Drif Wood',\n        'Dirt Track',\n        'Green Grass',\n        'Yellow Lichen',\n    ],\n    people: [\n        'Crossing Alone',\n        'Budding Grove',\n        'Light Hair',\n        'Black & White',\n        'Rock Concert',\n        'Meeting Bench',\n        'Son & Lumière',\n        'Running Boy',\n        'Dining Hall',\n        'Tunnel People',\n    ],\n    sports: [\n        'Feather Ball',\n        'Wall Skate',\n        'Kick Flip',\n        'Down Hill',\n        'Baseball Night',\n        'Touch Line',\n        'Alone Jogger',\n        'Green Basket',\n        'Mud Hug',\n        'Metal Cycle',\n    ],\n    tech: [\n        'Black Screen',\n        'Phone Call',\n        'Tablet & Phone',\n        'No Battery',\n        'Phone Book',\n        'Camera Parts',\n        'Fuzzy Phone',\n        'Music & Light',\n        'Eye Rest',\n        'Aligned Parts',\n    ],\n    travel: [\n        'Distant Jet',\n        'Foggy Beach',\n        'White Lime',\n        'Mysterious Cloud',\n        'Mountain Top',\n        'Light House',\n        'Gray Day',\n        'Desert Walkway',\n        'Train Track',\n        'Plane Trees',\n    ],\n    water: [\n        'Fresh Stream',\n        'Reed Line',\n        'Mud Tracks',\n        'Beach Gazebo',\n        'Calm Sea',\n        'Early Bath',\n        'Aerial Coast',\n        'Canal Street',\n        'Artificial Beach',\n        'Rainy Day',\n    ],\n};\n\nexport default db => {\n    let id = 0;\n\n    return db.categories.reduce(\n        (acc, category) => [\n            ...acc,\n            ...Array.from(Array(10).keys()).map(index => {\n                const width = randomFloat(10, 40);\n                const height = randomFloat(10, 40);\n\n                return {\n                    id: id++,\n                    category_id: category.id,\n                    reference: productReferences[category.name][index],\n                    width: width,\n                    height: height,\n                    price: randomFloat(\n                        (width * height) / 20,\n                        (width * height) / 15\n                    ),\n                    thumbnail:\n                        'https://marmelab.com/posters/' +\n                        category.name +\n                        '-' +\n                        (index + 1) +\n                        '.jpeg',\n                    image:\n                        'https://marmelab.com/posters/' +\n                        category.name +\n                        '-' +\n                        (index + 1) +\n                        '.jpeg',\n                    description: lorem.paragraph(),\n                    stock: weightedBoolean(10)\n                        ? 0\n                        : random.number({ min: 0, max: 150 }),\n                    sales: 0,\n                };\n            }),\n        ],\n        []\n    );\n};\n","import { random } from 'faker/locale/en';\nimport { isAfter, subDays } from 'date-fns';\n\nimport {\n    randomDate,\n    randomFloat,\n    weightedArrayElement,\n    weightedBoolean,\n} from './utils';\n\nexport default (db, { serializeDate }) => {\n    const today = new Date();\n    const aMonthAgo = subDays(today, 30);\n    const realCustomers = db.customers.filter(customer => customer.has_ordered);\n\n    return Array.from(Array(600).keys()).map(id => {\n        const nbProducts = weightedArrayElement(\n            [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n            [30, 20, 5, 2, 1, 1, 1, 1, 1, 1]\n        );\n        const basket = Array.from(Array(nbProducts).keys()).map(() => ({\n            product_id: random.number({ min: 0, max: 10 * 13 - 1 }),\n            quantity: weightedArrayElement(\n                [1, 2, 3, 4, 5],\n                [10, 5, 3, 2, 1]\n            ) as number,\n        }));\n\n        const total_ex_taxes = basket.reduce(\n            (total, product) =>\n                total +\n                db.products[product.product_id].price * product.quantity,\n            0\n        );\n\n        const delivery_fees = randomFloat(3, 8);\n        const tax_rate = random.arrayElement([0.12, 0.17, 0.2]);\n        const taxes = parseFloat(\n            ((total_ex_taxes + delivery_fees) * tax_rate).toFixed(2)\n        );\n        const customer = random.arrayElement<any>(realCustomers);\n        const date = randomDate(customer.first_seen, customer.last_seen);\n\n        const status =\n            isAfter(date, aMonthAgo) && random.boolean()\n                ? 'ordered'\n                : weightedArrayElement(['delivered', 'cancelled'], [10, 1]);\n        return {\n            id,\n            reference: random.alphaNumeric(6).toUpperCase(),\n            date: serializeDate ? date.toISOString() : date,\n            customer_id: customer.id,\n            basket: basket,\n            total_ex_taxes: total_ex_taxes,\n            delivery_fees: delivery_fees,\n            tax_rate: tax_rate,\n            taxes: taxes,\n            total: parseFloat(\n                (total_ex_taxes + delivery_fees + taxes).toFixed(2)\n            ),\n            status: status,\n            returned: status === 'delivered' ? weightedBoolean(10) : false,\n        };\n    });\n};\n","export default db => {\n    let id = 0;\n\n    return (\n        db.commands\n            .filter(command => command.status !== 'delivered')\n            // @ts-ignore\n            .sort((a, b) => new Date(a.date) - new Date(b.date))\n            .map(command => ({\n                id: id++,\n                date: command.date,\n                command_id: command.id,\n                customer_id: command.customer_id,\n                total_ex_taxes: command.total_ex_taxes,\n                delivery_fees: command.delivery_fees,\n                tax_rate: command.tax_rate,\n                taxes: command.taxes,\n                total: command.total,\n            }))\n    );\n};\n","import { random, lorem } from 'faker/locale/en';\nimport { subDays, isAfter } from 'date-fns';\n\nimport { randomDate, weightedArrayElement, weightedBoolean } from './utils';\n\nexport default (db, { serializeDate }) => {\n    const today = new Date();\n    const aMonthAgo = subDays(today, 30);\n\n    let id = 0;\n    const reviewers = db.customers\n        .filter(customer => customer.has_ordered)\n        .filter(() => weightedBoolean(60)) // only 60% of buyers write reviews\n        .map(customer => customer.id);\n\n    return db.commands\n        .filter(command => reviewers.indexOf(command.customer_id) !== -1)\n        .reduce(\n            (acc, command) => [\n                ...acc,\n                ...command.basket\n                    .filter(() => weightedBoolean(40)) // reviewers review 40% of their products\n                    .map(product => {\n                        const date = randomDate(command.date);\n                        const status = isAfter(aMonthAgo, date)\n                            ? weightedArrayElement(\n                                  ['accepted', 'rejected'],\n                                  [3, 1]\n                              )\n                            : weightedArrayElement(\n                                  ['pending', 'accepted', 'rejected'],\n                                  [5, 3, 1]\n                              );\n\n                        return {\n                            id: id++,\n                            date: serializeDate ? date.toISOString() : date,\n                            status: status,\n                            command_id: command.id,\n                            product_id: product.product_id,\n                            customer_id: command.customer_id,\n                            rating: random.number({ min: 1, max: 5 }),\n                            comment: Array.apply(\n                                null,\n                                Array(random.number({ min: 1, max: 5 }))\n                            )\n                                .map(() => lorem.sentences())\n                                .join('\\n \\r'),\n                        };\n                    }),\n            ],\n            []\n        );\n};\n","import { weightedBoolean } from './utils';\n\nexport default function (db) {\n    // set latest purchase date\n    db.commands.forEach(command => {\n        let customer = db.customers[command.customer_id];\n        if (\n            !customer.latest_purchase ||\n            customer.latest_purchase < command.date\n        ) {\n            customer.latest_purchase = command.date;\n        }\n        customer.total_spent += command.total;\n        customer.nb_commands++;\n    });\n\n    // set product sales\n    db.commands.forEach(command => {\n        command.basket.forEach(item => {\n            db.products[item.product_id].sales += item.quantity;\n        });\n    });\n\n    // add 'collector' group\n    const customersBySpending = db.commands.reduce((customers, command) => {\n        if (!customers[command.customer_id]) {\n            customers[command.customer_id] = { nbProducts: 0 };\n        }\n        customers[command.customer_id].nbProducts += command.basket.length;\n        return customers;\n    }, {});\n    Object.keys(customersBySpending).forEach(customer_id => {\n        if (customersBySpending[customer_id].nbProducts > 10) {\n            db.customers[customer_id].groups.push('collector');\n        }\n    });\n\n    // add 'ordered_once' group\n    db.customers\n        .filter(customer => customer.nb_commands === 1)\n        .forEach(customer => customer.groups.push('ordered_once'));\n\n    // add 'compulsive' group\n    db.customers\n        .filter(customer => customer.total_spent > 1500)\n        .forEach(customer => customer.groups.push('compulsive'));\n\n    // add 'regular' group\n    db.customers\n        .filter(() => weightedBoolean(20))\n        .forEach(customer => customer.groups.push('regular'));\n\n    // add 'returns' group\n    db.commands\n        .filter(command => command.returned)\n        .forEach(command => {\n            if (\n                db.customers[command.customer_id].groups.indexOf('returns') ===\n                -1\n            ) {\n                db.customers[command.customer_id].groups.push('returns');\n            }\n        });\n\n    // add 'reviewer' group\n    db.reviews.forEach(review => {\n        let customer = db.customers[review.customer_id];\n        if (customer.groups.indexOf('reviewer') === -1) {\n            customer.groups.push('reviewer');\n        }\n    });\n\n    // add settings\n    db.settings = [\n        {\n            id: 1,\n            configuration: {\n                url: 'http://posters-galore.com/',\n                mail: {\n                    sender: 'julio@posters-galore.com',\n                    transport: {\n                        service: 'fakemail',\n                        auth: {\n                            user: 'fake@mail.com',\n                            pass: 'f00b@r',\n                        },\n                    },\n                },\n                file_type_whiltelist: [\n                    'txt',\n                    'doc',\n                    'docx',\n                    'xls',\n                    'xlsx',\n                    'pdf',\n                    'png',\n                    'jpg',\n                ],\n            },\n        },\n    ];\n}\n","import { RaRecord } from 'ra-core';\n\nimport generateCustomers from './customers';\nimport generateCategories from './categories';\nimport generateProducts from './products';\nimport generateCommands from './commands';\nimport generateInvoices from './invoices';\nimport generateReviews from './reviews';\nimport finalize from './finalize';\n\nexport interface Db {\n    customers: RaRecord[];\n    categories: RaRecord[];\n    products: RaRecord[];\n    commands: RaRecord[];\n    invoices: RaRecord[];\n    reviews: RaRecord[];\n}\n\nexport default (options = { serializeDate: true }): Db => {\n    const db = {} as Db;\n    db.customers = generateCustomers(db, options);\n    db.categories = generateCategories();\n    db.products = generateProducts(db);\n    db.commands = generateCommands(db, options);\n    db.invoices = generateInvoices(db);\n    db.reviews = generateReviews(db, options);\n    finalize(db);\n\n    return db;\n};\n"],"names":["data","generateData","serializeDate","restServer","FakeRest","window","init","toggleLogging","fetchMock","getHandler","reduce","i","concat","Array","fill","Date","getTime","now","max","Math","sqrt","parseFloat","min","precision","toFixed","from","keys","map","name","internet","date","id","first_name","last_name","email","address","zipcode","city","stateAbbr","avatar","birthday","toISOString","first_seen","last_seen","has_ordered","latest_purchase","has_newsletter","groups","nb_commands","total_spent","animals","beard","business","cars","flowers","food","nature","people","sports","tech","travel","water","categories","category_id","reference","width","height","price","thumbnail","image","description","lorem","stock","random","sales","a","customers","filter","product_id","quantity","products","toUpperCase","customer_id","basket","total_ex_taxes","delivery_fees","tax_rate","taxes","total","status","returned","commands","sort","command_id","indexOf","rating","comment","apply","join","forEach","nbProducts","length","Object","push","reviews","settings","configuration","url","mail","sender","transport","service","auth","user","pass","file_type_whiltelist","invoices"],"sourceRoot":""}